[tool.poetry]
name = "hexa-fastapi"
version = "0.1.0"
description = "Personal boilerplate for FastAPI DDD projects"
authors = ["Arslan <rslnkrmt2552@gmail.com>"]
license = "MIT"

[tool.poetry.dependencies]
python = "^3.10"
hypercorn = { extras = ["h3"], version = "^0.13.2" }
uvloop = "^0.16.0"
orjson = "^3.8.0"
fastapi = "^0.81.0"
loguru = "^0.6.0"
classy-fastapi = "^0.2.10"
antidote = "^2.0.0"

[tool.poetry.dev-dependencies]
mypy = "^0.971"
pytest = "^7.1.2"
black = "^22.6.0"
isort = "^5.10.1"
pytest-xdist = "^2.5.0"
pytest-sugar = "^0.9.5"
httpx = "^0.23.0"
pytest-asyncio = "^0.19.0"
poethepoet = "^0.16.0"
flakeheaven = "^3.0.0"
flake8-aaa = "^0.12.2"
flake8-annotations = "^2.9.1"
flake8-annotations-complexity = "^0.0.7"
flake8-bugbear = "^22.8.23"
flake8-debugger = "^4.1.2"
flake8-fixme = "^1.1.1"
flake8-markdown = "^0.3.0"
flake8-mutable = "^1.2.0"
flake8-pytest = "^1.4"
flake8-pytest-style = "^1.6.0"
flake8-simplify = "^0.19.3"
flake8-variables-names = "^0.0.5"
flake8-comprehensions = "^3.10.0"
flake8-expression-complexity = "^0.0.11"
flake8-use-fstring = "^1.4"
flake8-eradicate = "^1.3.0"
dlint = "^0.13.0"
pep8-naming = "^0.13.2"

[tool.poetry.group.dev.dependencies]
ipython = "^8.4.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poe.tasks]
test = "python -m pytest tests"
tc = "dmypy run -- src server.py"
sort = "isort -- src server.py"
fmt = "black -- src server.py"
lint = "flakeheaven lint -- src tests server.py"
start = "python server.py"

[tool.flake8]
max-line-length = 88

[tool.isort]
profile = "black"
src_paths = ["src"]
known_third_party = ["fastapi", "pydantic", "starlette", "uvloop"]

[tool.black]
line-length = 88
target-version = ['py37', 'py38', 'py39', 'py310']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  # The following are specific to Black, you probably don't want those.
  | blib2to3
  | tests/data
  | profiling
)/
'''

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "-vv --tb=short"
norecursedirs = [".tox", ".git", "*/migrations/*", "*/static/*", "docs", "venv"]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "secondary: mark tests that use functionality tested in the same file (deselect with '-m \"not secondary\"')",
]
filterwarnings = ["error"]

[tool.coverage.report]
exclude_lines = [
  # Have to re-enable the standard pragma
  'pragma: no cover',

  # Type checking can not be tested
  'if TYPE_CHECKING:',

  # Ignore the Abstract classes definition
  'raise NotImplementedError',
]

[tool.mypy]
show_error_codes = true
#follow_imports = "silent"
ignore_missing_imports = false
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
warn_unused_configs = true
disallow_subclassing_any = false
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_calls = false
disallow_untyped_defs = false
plugins = [
  # "pydantic.mypy"
]
mypy_path = "src"

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true


# --------- Flakeheaven -------------

[tool.flakeheaven]
format = "grouped"
max_line_length = 88
show_source = true
docstring-convention = "google"

[tool.flakeheaven.plugins]
flake8-aaa = ["+*"]
flake8-annotations = [
  "+*",
  "-ANN101", # There is usually no need to type the self argument of class methods.
  "-ANN102", # There is usually no need to type the cls argument of class methods.
]
flake8-annotations-complexity = ["+*"]
flake8-bugbear = ["+*"]
flake8-comprehensions = ["+*"]
flake8-debugger = ["+*"]
flake8-docstrings = [
  "+*",
  "-D101", # Missing docstring, already covered by C0115 of pylint
]
flake8-eradicate = ["+*"]
flake8-expression-complexity = ["+*"]
flake8-fixme = ["+*"]
flake8-markdown = ["+*"]
flake8-mutable = ["+*"]
flake8-pytest = ["+*"]
flake8-pytest-style = ["+*"]
flake8-simplify = ["+*"]
flake8-use-fstring = [
  "+*",
  '-FS003', # f-string missing prefix
]
#flake8-typing-imports = [
#  "+*",
#  "-TYP001", # guard import by `if False:  # TYPE_CHECKING`: TYPE_CHECKING (not in
#   3.5.0, 3.5.1). We don't support Python 3.5
#  "-TYP002", # @overload is broken in <3.5.2, but we don't support Python 3.5
#]
flake8-variables-names = ["+*"]
dlint = ["+*"]
pylint = [
  "+*",
  "-C0411", # %s should be placed before %s,
  # see https://github.com/PyCQA/pylint/issues/2175 and https://github.com/PyCQA/pylint/issues/1797
  "-R0903", # Too few methods warning, but if you define an interface with just one
  # method that's fine
  "-W1203", # Use %s formatting in logging functions. Deprecated rule in favor of
  # f-strings.
  "-W1201", # Use lazy % formatting in logging functions. Deprecated rule in favor of
  # f-strings.
  "-C0301", # Lines too long. Already covered by E501.
]
mccabe = ["+*"]
pep8-naming = ["+*"]
pycodestyle = [
  "+*",
  "-W503", # No longer applies, incompatible with newer version of PEP8
  # see https://github.com/PyCQA/pycodestyle/issues/197
  # and https://github.com/psf/black/issues/113
]
pyflakes = [
  "+*",
  "-F841", # Unused variable, already covered by W0612 of pylint
  "-F821", # Undefined variable, already covered by E0602 of pylint
]

[tool.flakeheaven.exceptions."tests/"]
flake8-docstrings = [
  "-D205", # 1 blank line required between summary line and description
  "-D212", # Multi-line docstring summary should start at the first line
  "-D400", # First line should end with a period
  "-D415", # First line should end with a period, question mark, or exclamation point
]
flake8-annotations = [
  "-ANN001",
  "-ANN401", # Dynamically typed expressions (typing.Any) are disallowed
  "-ANN201",
]
pylint = [
  "-R0201", # Method could be a function. Raised because the methods of a test class
  # don't use the self object, which is not wrong.
  "-W0613", # Unused argument in function, but in tests there are fixtures that even
  # though they are not used in the function directly, they are used to
  # configure the test.
]

[tool.flakeheaven.exceptions."*_controller.py"]
flake8-annotations = ["-ANN201"]
